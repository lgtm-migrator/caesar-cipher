{"version":3,"sources":["Shift.js","PlainText.js","EncryptedText.js","App.js","serviceWorker.js","index.js"],"names":["shiftValues","Array","keys","React","value","onChange","FormControl","InputLabel","htmlFor","Select","id","name","MenuItem","map","idx","key","FormHelperText","prevProps","nextProps","TextField","label","fullWidth","useState","useEffect","useStyles","makeStyles","theme","delta","padding","spacing","textAlign","paper","color","palette","text","secondary","encrypt","replace","letter","String","fromCharCode","charCodeAt","upper","lower","App","classes","setText","encrypted","setEncrypted","setDelta","Container","size","Typography","align","component","variant","gutterBottom","Grid","container","item","xs","Paper","className","elevation","e","Number","parseInt","target","sm","Boolean","window","location","hostname","match","ReactDOM","render","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5e79f654.chunk.js","sourcesContent":["/* @flow */\nimport * as React from 'react';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst shiftValues = [...Array(24).keys()];\n\ntype Props = {\n    value: number,\n    onChange: <T>(SyntheticInputEvent<HTMLSelectElement>) => void,\n}\n\nconst shouldUpdate = (prevProps: Props, nextProps: Props) : bool => prevProps.value === nextProps.value;\n\nconst Shift = ({value, onChange}: Props) => (\n    <FormControl>\n        <InputLabel htmlFor=\"delta\">Delta</InputLabel>\n        <Select\n            id=\"delta\"\n            name=\"delta\"\n            value={value}\n            onChange={onChange}\n        >\n            <MenuItem value={0}>\n                <em>None</em>\n            </MenuItem>\n            {shiftValues.map((idx) => (\n                <MenuItem key={idx} value={idx + 1}>{idx + 1}</MenuItem>\n            ))}\n        </Select>\n        <FormHelperText>How many letters to shift.</FormHelperText>\n    </FormControl>\n);\n\nexport default React.memo<Props>(Shift, shouldUpdate);","/* @flow */\nimport * as React from 'react';\nimport TextField from '@material-ui/core/TextField';\n\ntype Props = {\n    value: string,\n    onChange: <T>(SyntheticInputEvent<HTMLInputElement>) => void\n}\n\nconst shouldUpdate = (prevProps: Props, nextProps: Props) : bool => prevProps.value === nextProps.value;\n\nconst PlainText = ({value, onChange}: Props) => (\n    <TextField\n        id=\"plain\"\n        name=\"plain\"\n        label=\"Plain Text\"\n        value={value}\n        onChange={onChange}\n        fullWidth />\n);\n\nexport default React.memo<Props>(PlainText, shouldUpdate)","/* @flow */\nimport * as React from 'react';\nimport TextField from '@material-ui/core/TextField';\n\ntype Props = {\n    value: string,\n    onChange: <T>(SyntheticInputEvent<HTMLInputElement>) => void\n}\n\nconst shouldUpdate = (prevProps: Props, nextProps: Props) : bool => prevProps.value === nextProps.value;\n\nconst EncryptedText = ({value, onChange}: Props) => (\n    <TextField\n        id=\"encrypted\"\n        name=\"encrypted\"\n        label=\"Encrypted Text\"\n        value={value}\n        onChange={onChange}\n        fullWidth />\n);\n\nexport default React.memo<Props>(EncryptedText, shouldUpdate)","/* @flow */\nimport * as React from 'react';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Shift from './Shift';\nimport PlainText from './PlainText';\nimport EncryptedText from './EncryptedText';\n\nconst { useState, useEffect } = React;\n\ntype ThemeObject = {\n    spacing: (number) => string,\n    palette: {\n        text: {\n            secondary: string\n        }\n    }\n};\n\ntype useStylesObject = {\n    paper: {\n        padding: string,\n        color: string,\n    },\n    delta: {\n        padding: string,\n        textAlign: string,\n    }\n};\n\ntype useStylesFunction = (void) => { delta: string, paper: string};\n\nconst makeStylesCb = (theme: ThemeObject) : useStylesObject => ({\n    delta: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n    },\n    paper: {\n        padding: theme.spacing(2),\n        color: theme.palette.text.secondary,\n    },\n})\n\n\nconst useStyles: useStylesFunction = makeStyles(makeStylesCb);\n\n\nconst upper = (delta: number) => (letter: string) => String.fromCharCode((letter.charCodeAt(0) + delta - 65) % 26 + 65);\nconst lower = (delta: number) => (letter: string) => String.fromCharCode((letter.charCodeAt(0) + delta - 97) % 26 + 97);\nconst encrypt = (text: string, delta: number) => text.replace(/[A-Z]/g, upper(delta)).replace(/[a-z]/g, lower(delta));\n\nfunction App(): React.Node {\n    const classes = useStyles();\n    const [text: string, setText] = useState('');\n    const [encrypted: string, setEncrypted] = useState('');\n    const [delta: number, setDelta] = useState(0);\n\n    const handleDeltaChange = (e: SyntheticInputEvent<HTMLSelectElement>) : void => {\n        const value = Number.parseInt(e.target.value, 10);\n        setDelta(value);\n    }\n\n    const handleTextChange = (e: SyntheticInputEvent<HTMLInputElement>) : void => {\n        const { value } = e.target;\n        setText(value);\n        setEncrypted(encrypt(value, delta));\n    }\n\n    const handleEncryptedChange = (e: SyntheticInputEvent<HTMLInputElement>) : void => {\n        const { value } = e.target;\n        setEncrypted(value);\n        setText(encrypt(value, delta));\n    }\n\n    // Reset Text and Encrypted if we change the delta\n    useEffect(() => {\n        setText('')\n        setEncrypted('')\n    }, [delta])\n\n    return (\n        <Container size=\"sm\">\n            <Typography align=\"center\" component=\"h1\" variant=\"h2\" gutterBottom>\n                Caesar Cipher\n            </Typography>\n            <Grid container spacing={3}>\n                <Grid item xs={12}>\n                    <Paper className={classes.delta} elevation={0}>\n                        <Shift value={delta} onChange={handleDeltaChange}/>\n                    </Paper>\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <Paper className={classes.paper} elevation={0}>\n                        <PlainText value={text} onChange={handleTextChange}/> \n                    </Paper>\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <Paper className={classes.paper} elevation={0}>\n                        <EncryptedText value={encrypted} onChange={handleEncryptedChange}/>\n                    </Paper>\n                </Grid>\n            </Grid>\n        </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<><CssBaseline/><App /></>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}