{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","paper","padding","spacing","color","palette","text","secondary","delta","textAlign","encrypt","replace","letter","String","fromCharCode","charCodeAt","upper","lower","shiftValues","Array","keys","App","classes","useState","setText","encrypted","setEncrypted","setDelta","useEffect","Container","size","Typography","align","component","variant","gutterBottom","Grid","container","item","xs","Paper","className","elevation","FormControl","InputLabel","htmlFor","Select","id","name","value","onChange","e","target","MenuItem","map","idx","key","FormHelperText","TextField","label","fullWidth","Boolean","window","location","hostname","match","ReactDOM","render","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yTAaMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,MAAO,CACHC,QAASF,EAAMG,QAAQ,GACvBC,MAAOJ,EAAMK,QAAQC,KAAKC,WAE9BC,MAAO,CACHN,QAASF,EAAMG,QAAQ,GACvBM,UAAW,cAMbC,EAAU,SAACJ,EAAME,GAAP,OAAiBF,EAAKK,QAAQ,SAFhC,SAACH,GAAD,OAAW,SAACI,GAAD,OAAYC,OAAOC,cAAcF,EAAOG,aAAeP,EAAQ,IAAM,GAAK,KAE3CQ,CAAMR,IAAQG,QAAQ,SADhE,SAACH,GAAD,OAAW,SAACI,GAAD,OAAYC,OAAOC,cAAcF,EAAOG,aAAeP,EAAQ,IAAM,GAAK,KACXS,CAAMT,KAExFU,EAAW,YAAOC,MAAM,IAAIC,QAgFnBC,MA9Ef,WACI,IAAMC,EAAUxB,IADL,EAEayB,mBAAS,IAFtB,mBAEJjB,EAFI,KAEEkB,EAFF,OAGuBD,mBAAS,IAHhC,mBAGJE,EAHI,KAGOC,EAHP,OAIeH,mBAAS,IAJxB,mBAIJf,EAJI,KAIGmB,EAJH,KAwBX,OALAC,qBAAU,WACNJ,EAAQ,IACRE,EAAa,MACd,CAAClB,IAGA,kBAACqB,EAAA,EAAD,CAAWC,KAAK,MACZ,kBAACC,EAAA,EAAD,CAAYC,MAAM,SAASC,UAAU,KAAKC,QAAQ,KAAKC,cAAY,GAAnE,iBAGA,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAAClC,QAAS,GACrB,kBAACiC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACX,kBAACC,EAAA,EAAD,CAAOC,UAAWnB,EAAQd,MAAOkC,UAAW,GACxC,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,SAApB,SACA,kBAACC,EAAA,EAAD,CACIC,GAAG,QACHC,KAAK,QACLC,MAAOzC,EACP0C,SAAU,SAACC,GAAD,OAAOxB,EAASwB,EAAEC,OAAOH,SAEnC,kBAACI,EAAA,EAAD,CAAUJ,MAAO,GACb,qCAEH/B,EAAYoC,KAAI,SAACC,GAAD,OACb,kBAACF,EAAA,EAAD,CAAUG,IAAKD,EAAKN,MAAOM,EAAM,GAAIA,EAAM,OAGnD,kBAACE,EAAA,EAAD,sCAIZ,kBAACrB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAACC,EAAA,EAAD,CAAOC,UAAWnB,EAAQrB,MAAOyC,UAAW,GACxC,kBAACgB,EAAA,EAAD,CACIX,GAAG,QACHC,KAAK,QACLW,MAAM,aACNV,MAAO3C,EACP4C,SApDC,SAACC,GAAO,IACrBF,EAAUE,EAAEC,OAAZH,MACRzB,EAAQyB,GACRvB,EAAahB,EAAQuC,EAAOzC,KAkDRoD,WAAS,MAGrB,kBAACxB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAACC,EAAA,EAAD,CAAOC,UAAWnB,EAAQrB,MAAOyC,UAAW,GACxC,kBAACgB,EAAA,EAAD,CACIX,GAAG,YACHC,KAAK,YACLW,MAAM,iBACNV,MAAOxB,EACPyB,SAzDM,SAACC,GAAO,IAC1BF,EAAUE,EAAEC,OAAZH,MACRvB,EAAauB,GACbzB,EAAQd,EAAQuC,EAAOzC,KAuDHoD,WAAS,SCxFjBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,oCAAE,kBAACC,EAAA,EAAD,MAAc,kBAAC,EAAD,OAAYC,SAASC,eAAe,SD2H9D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.053f63e1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        padding: theme.spacing(2),\n        color: theme.palette.text.secondary,\n    },\n    delta: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n    },\n}));\n\nconst upper = (delta) => (letter) => String.fromCharCode((letter.charCodeAt() + delta - 65) % 26 + 65);\nconst lower = (delta) => (letter) => String.fromCharCode((letter.charCodeAt() + delta - 97) % 26 + 97);\nconst encrypt = (text, delta) => text.replace(/[A-Z]/g, upper(delta)).replace(/[a-z]/g, lower(delta));\n\nconst shiftValues = [...Array(24).keys()];\n\nfunction App() {\n    const classes = useStyles();\n    const [text, setText] = useState('');\n    const [encrypted, setEncrypted] = useState('');\n    const [delta, setDelta] = useState('');\n\n    const handleTextChange = (e) => {\n        const { value } = e.target;\n        setText(value);\n        setEncrypted(encrypt(value, delta));\n    }\n\n    const handleEncryptedChange = (e) => {\n        const { value } = e.target;\n        setEncrypted(value);\n        setText(encrypt(value, delta));\n    }\n\n    // Reset Text and Encrypted if we change the delta\n    useEffect(() => {\n        setText('')\n        setEncrypted('')\n    }, [delta])\n\n    return (\n        <Container size=\"sm\">\n            <Typography align=\"center\" component=\"h1\" variant=\"h2\" gutterBottom>\n                Caesar Cipher\n            </Typography>\n            <Grid container spacing={3}>\n                <Grid item xs={12}>\n                    <Paper className={classes.delta} elevation={0}>\n                        <FormControl>\n                            <InputLabel htmlFor=\"delta\">Delta</InputLabel>\n                            <Select\n                                id=\"delta\"\n                                name=\"delta\"\n                                value={delta}\n                                onChange={(e) => setDelta(e.target.value)}\n                            >\n                                <MenuItem value={0}>\n                                    <em>None</em>\n                                </MenuItem>\n                                {shiftValues.map((idx) => (\n                                    <MenuItem key={idx} value={idx + 1}>{idx + 1}</MenuItem>\n                                ))}\n                            </Select>\n                            <FormHelperText>How many letters to shift.</FormHelperText>\n                        </FormControl>\n                    </Paper>\n                </Grid>\n                <Grid item xs={6}>\n                    <Paper className={classes.paper} elevation={0}>\n                        <TextField\n                            id=\"plain\"\n                            name=\"plain\"\n                            label=\"Plain Text\"\n                            value={text}\n                            onChange={handleTextChange}\n                            fullWidth />\n                    </Paper>\n                </Grid>\n                <Grid item xs={6}>\n                    <Paper className={classes.paper} elevation={0}>\n                        <TextField\n                            id=\"encrypted\"\n                            name=\"encrypted\"\n                            label=\"Encrypted Text\"\n                            value={encrypted}\n                            onChange={handleEncryptedChange}\n                            fullWidth />\n                    </Paper>\n                </Grid>\n            </Grid>\n        </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<><CssBaseline/><App /></>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}